//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Samples/XR Interaction Toolkit/2.5.2/Starter Assets/AR Default Input Actions 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ARDefaultInputActions1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ARDefaultInputActions1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AR Default Input Actions 1"",
    ""maps"": [
        {
            ""name"": ""Touchscreen Gestures"",
            ""id"": ""6fb00339-a75a-4e5b-94e0-839f979f2a8a"",
            ""actions"": [
                {
                    ""name"": ""Tap Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""0f53f821-ec5d-472c-bd12-fb5ce515ae59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag Current Position"",
                    ""type"": ""Value"",
                    ""id"": ""07fd51be-2a34-4531-939c-ff750fcf8e4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag Delta"",
                    ""type"": ""Value"",
                    ""id"": ""ccd1d49f-8e5b-4c66-8d2c-fb774934270b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""07f4446a-0f0c-4176-a67e-75be05a3be3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Gap"",
                    ""type"": ""Value"",
                    ""id"": ""c299ab55-2420-4eb1-a459-0af3846471b9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Gap Delta"",
                    ""type"": ""Value"",
                    ""id"": ""d1d816b2-4bec-4393-bf83-a59146ee0abc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Twist Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""e476e037-f414-4b6d-ac4a-486d7228ec43"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Twist Delta Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""5910a9c0-4a90-4a2c-92cb-e33054cfd463"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Screen Touch Count"",
                    ""type"": ""Value"",
                    ""id"": ""c1e4b6b1-d82a-485c-9d29-9d42e48df255"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fea81b99-07f5-426a-beba-5e0832c14855"",
                    ""path"": ""<TouchscreenGestureInputController>/tapStartPosition"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb175a82-fad6-4249-bc9f-a6c9acee4436"",
                    ""path"": ""<TouchscreenGestureInputController>/dragCurrentPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2648faca-8c9b-4bcd-9653-fc9cfa39dbe3"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""1f42a89b-32be-49d7-8153-507ff950cb3b"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""7e88eed9-d5b6-4c3a-9dd7-ac83c45fced3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""40fc89b1-2773-4288-b02f-892fea9b7d48"",
                    ""path"": ""<TouchscreenGestureInputController>/twistDeltaRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Delta Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d919e652-0e4a-4f12-a1f9-b18cead206e2"",
                    ""path"": ""<TouchscreenGestureInputController>/fingerCount"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screen Touch Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""044d4cc1-3ad7-4d38-a95f-994badd7e1a3"",
                    ""path"": ""<TouchscreenGestureInputController>/dragDelta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e3b31e7-2f82-40f3-bfe1-ad0fa7f035d4"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchStartPosition1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3092672-a026-446d-8bb6-44843db135b1"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchGapDelta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f8550ed-7261-48e0-aa0e-6670f29141f5"",
                    ""path"": ""<TouchscreenGestureInputController>/twistStartPosition1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f94c62c-7c6d-4547-82fe-b6ed10da8388"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchGap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Generic XR Controller"",
            ""bindingGroup"": ""Generic XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<WMRHMD>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Continuous Move"",
            ""bindingGroup"": ""Continuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Noncontinuous Move"",
            ""bindingGroup"": ""Noncontinuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Touchscreen Gestures
        m_TouchscreenGestures = asset.FindActionMap("Touchscreen Gestures", throwIfNotFound: true);
        m_TouchscreenGestures_TapStartPosition = m_TouchscreenGestures.FindAction("Tap Start Position", throwIfNotFound: true);
        m_TouchscreenGestures_DragCurrentPosition = m_TouchscreenGestures.FindAction("Drag Current Position", throwIfNotFound: true);
        m_TouchscreenGestures_DragDelta = m_TouchscreenGestures.FindAction("Drag Delta", throwIfNotFound: true);
        m_TouchscreenGestures_PinchStartPosition = m_TouchscreenGestures.FindAction("Pinch Start Position", throwIfNotFound: true);
        m_TouchscreenGestures_PinchGap = m_TouchscreenGestures.FindAction("Pinch Gap", throwIfNotFound: true);
        m_TouchscreenGestures_PinchGapDelta = m_TouchscreenGestures.FindAction("Pinch Gap Delta", throwIfNotFound: true);
        m_TouchscreenGestures_TwistStartPosition = m_TouchscreenGestures.FindAction("Twist Start Position", throwIfNotFound: true);
        m_TouchscreenGestures_TwistDeltaRotation = m_TouchscreenGestures.FindAction("Twist Delta Rotation", throwIfNotFound: true);
        m_TouchscreenGestures_ScreenTouchCount = m_TouchscreenGestures.FindAction("Screen Touch Count", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touchscreen Gestures
    private readonly InputActionMap m_TouchscreenGestures;
    private List<ITouchscreenGesturesActions> m_TouchscreenGesturesActionsCallbackInterfaces = new List<ITouchscreenGesturesActions>();
    private readonly InputAction m_TouchscreenGestures_TapStartPosition;
    private readonly InputAction m_TouchscreenGestures_DragCurrentPosition;
    private readonly InputAction m_TouchscreenGestures_DragDelta;
    private readonly InputAction m_TouchscreenGestures_PinchStartPosition;
    private readonly InputAction m_TouchscreenGestures_PinchGap;
    private readonly InputAction m_TouchscreenGestures_PinchGapDelta;
    private readonly InputAction m_TouchscreenGestures_TwistStartPosition;
    private readonly InputAction m_TouchscreenGestures_TwistDeltaRotation;
    private readonly InputAction m_TouchscreenGestures_ScreenTouchCount;
    public struct TouchscreenGesturesActions
    {
        private @ARDefaultInputActions1 m_Wrapper;
        public TouchscreenGesturesActions(@ARDefaultInputActions1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapStartPosition => m_Wrapper.m_TouchscreenGestures_TapStartPosition;
        public InputAction @DragCurrentPosition => m_Wrapper.m_TouchscreenGestures_DragCurrentPosition;
        public InputAction @DragDelta => m_Wrapper.m_TouchscreenGestures_DragDelta;
        public InputAction @PinchStartPosition => m_Wrapper.m_TouchscreenGestures_PinchStartPosition;
        public InputAction @PinchGap => m_Wrapper.m_TouchscreenGestures_PinchGap;
        public InputAction @PinchGapDelta => m_Wrapper.m_TouchscreenGestures_PinchGapDelta;
        public InputAction @TwistStartPosition => m_Wrapper.m_TouchscreenGestures_TwistStartPosition;
        public InputAction @TwistDeltaRotation => m_Wrapper.m_TouchscreenGestures_TwistDeltaRotation;
        public InputAction @ScreenTouchCount => m_Wrapper.m_TouchscreenGestures_ScreenTouchCount;
        public InputActionMap Get() { return m_Wrapper.m_TouchscreenGestures; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchscreenGesturesActions set) { return set.Get(); }
        public void AddCallbacks(ITouchscreenGesturesActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Add(instance);
            @TapStartPosition.started += instance.OnTapStartPosition;
            @TapStartPosition.performed += instance.OnTapStartPosition;
            @TapStartPosition.canceled += instance.OnTapStartPosition;
            @DragCurrentPosition.started += instance.OnDragCurrentPosition;
            @DragCurrentPosition.performed += instance.OnDragCurrentPosition;
            @DragCurrentPosition.canceled += instance.OnDragCurrentPosition;
            @DragDelta.started += instance.OnDragDelta;
            @DragDelta.performed += instance.OnDragDelta;
            @DragDelta.canceled += instance.OnDragDelta;
            @PinchStartPosition.started += instance.OnPinchStartPosition;
            @PinchStartPosition.performed += instance.OnPinchStartPosition;
            @PinchStartPosition.canceled += instance.OnPinchStartPosition;
            @PinchGap.started += instance.OnPinchGap;
            @PinchGap.performed += instance.OnPinchGap;
            @PinchGap.canceled += instance.OnPinchGap;
            @PinchGapDelta.started += instance.OnPinchGapDelta;
            @PinchGapDelta.performed += instance.OnPinchGapDelta;
            @PinchGapDelta.canceled += instance.OnPinchGapDelta;
            @TwistStartPosition.started += instance.OnTwistStartPosition;
            @TwistStartPosition.performed += instance.OnTwistStartPosition;
            @TwistStartPosition.canceled += instance.OnTwistStartPosition;
            @TwistDeltaRotation.started += instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.performed += instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.canceled += instance.OnTwistDeltaRotation;
            @ScreenTouchCount.started += instance.OnScreenTouchCount;
            @ScreenTouchCount.performed += instance.OnScreenTouchCount;
            @ScreenTouchCount.canceled += instance.OnScreenTouchCount;
        }

        private void UnregisterCallbacks(ITouchscreenGesturesActions instance)
        {
            @TapStartPosition.started -= instance.OnTapStartPosition;
            @TapStartPosition.performed -= instance.OnTapStartPosition;
            @TapStartPosition.canceled -= instance.OnTapStartPosition;
            @DragCurrentPosition.started -= instance.OnDragCurrentPosition;
            @DragCurrentPosition.performed -= instance.OnDragCurrentPosition;
            @DragCurrentPosition.canceled -= instance.OnDragCurrentPosition;
            @DragDelta.started -= instance.OnDragDelta;
            @DragDelta.performed -= instance.OnDragDelta;
            @DragDelta.canceled -= instance.OnDragDelta;
            @PinchStartPosition.started -= instance.OnPinchStartPosition;
            @PinchStartPosition.performed -= instance.OnPinchStartPosition;
            @PinchStartPosition.canceled -= instance.OnPinchStartPosition;
            @PinchGap.started -= instance.OnPinchGap;
            @PinchGap.performed -= instance.OnPinchGap;
            @PinchGap.canceled -= instance.OnPinchGap;
            @PinchGapDelta.started -= instance.OnPinchGapDelta;
            @PinchGapDelta.performed -= instance.OnPinchGapDelta;
            @PinchGapDelta.canceled -= instance.OnPinchGapDelta;
            @TwistStartPosition.started -= instance.OnTwistStartPosition;
            @TwistStartPosition.performed -= instance.OnTwistStartPosition;
            @TwistStartPosition.canceled -= instance.OnTwistStartPosition;
            @TwistDeltaRotation.started -= instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.performed -= instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.canceled -= instance.OnTwistDeltaRotation;
            @ScreenTouchCount.started -= instance.OnScreenTouchCount;
            @ScreenTouchCount.performed -= instance.OnScreenTouchCount;
            @ScreenTouchCount.canceled -= instance.OnScreenTouchCount;
        }

        public void RemoveCallbacks(ITouchscreenGesturesActions instance)
        {
            if (m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchscreenGesturesActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchscreenGesturesActions @TouchscreenGestures => new TouchscreenGesturesActions(this);
    private int m_GenericXRControllerSchemeIndex = -1;
    public InputControlScheme GenericXRControllerScheme
    {
        get
        {
            if (m_GenericXRControllerSchemeIndex == -1) m_GenericXRControllerSchemeIndex = asset.FindControlSchemeIndex("Generic XR Controller");
            return asset.controlSchemes[m_GenericXRControllerSchemeIndex];
        }
    }
    private int m_ContinuousMoveSchemeIndex = -1;
    public InputControlScheme ContinuousMoveScheme
    {
        get
        {
            if (m_ContinuousMoveSchemeIndex == -1) m_ContinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Continuous Move");
            return asset.controlSchemes[m_ContinuousMoveSchemeIndex];
        }
    }
    private int m_NoncontinuousMoveSchemeIndex = -1;
    public InputControlScheme NoncontinuousMoveScheme
    {
        get
        {
            if (m_NoncontinuousMoveSchemeIndex == -1) m_NoncontinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Noncontinuous Move");
            return asset.controlSchemes[m_NoncontinuousMoveSchemeIndex];
        }
    }
    public interface ITouchscreenGesturesActions
    {
        void OnTapStartPosition(InputAction.CallbackContext context);
        void OnDragCurrentPosition(InputAction.CallbackContext context);
        void OnDragDelta(InputAction.CallbackContext context);
        void OnPinchStartPosition(InputAction.CallbackContext context);
        void OnPinchGap(InputAction.CallbackContext context);
        void OnPinchGapDelta(InputAction.CallbackContext context);
        void OnTwistStartPosition(InputAction.CallbackContext context);
        void OnTwistDeltaRotation(InputAction.CallbackContext context);
        void OnScreenTouchCount(InputAction.CallbackContext context);
    }
}
